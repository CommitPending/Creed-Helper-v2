{"version":3,"file":"static/js/803.4cf1d1fa.chunk.js","mappings":"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","sources":["components/boxrater/PokeChart.js","components/recoil/recoilState.js","components/boxrater/PokemonInBox.js","components/boxrater/BoxRater.js","pages/BoxRater.js"],"sourcesContent":["import React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { categorizedTotalsState } from '../recoil/recoilState';\r\nimport { Card, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\r\nimport Chart from 'react-apexcharts';\r\nimport '../../assets/scss/pokechart.scss'; \r\n\r\nconst PokeChart = () => {\r\n  const categorizedTotals = useRecoilValue(categorizedTotalsState);\r\n\r\n  // Calculate the series and total value\r\n  const series = Object.values(categorizedTotals).map((value) => parseFloat(value));\r\n  const totalValue = series.reduce((a, b) => a + b, 0);\r\n\r\n  // Generate a key based on categorizedTotals to force re-render\r\n  const chartKey = Object.entries(categorizedTotals)\r\n    .map(([key, value]) => `${key}-${value}`)\r\n    .join('_');\r\n\r\n  const options = {\r\n    chart: {\r\n      background: 'transparent',\r\n      toolbar: { show: false },\r\n      animations: {\r\n        enabled: true,\r\n        easing: 'easeinout',\r\n        speed: 800,\r\n        animateGradually: { enabled: true, delay: 150 },\r\n      },\r\n    },\r\n    labels: Object.keys(categorizedTotals),\r\n    colors: [\r\n      '#2de7e0', \r\n      '#b71515', \r\n      '#ffc107', \r\n      '#28a745', \r\n      '#573c9c', \r\n    ],\r\n    legend: {\r\n      show: true,\r\n      position: 'bottom',\r\n      fontSize: '14px',\r\n      labels: { colors: ['var(--body-color)'] },\r\n      markers: { width: 10, height: 10, radius: 5 },\r\n      itemMargin: { horizontal: 10, vertical: 5 },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      formatter: (val) => val.toLocaleString(),\r\n      dropShadow: {\r\n        enabled: false,\r\n      },\r\n      style: {\r\n        fontSize: '14px',\r\n        fontWeight: '600',\r\n        colors: ['var(--body-color)'],\r\n      },\r\n      background: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    tooltip: {\r\n      theme: 'dark',\r\n      y: { formatter: (val) => val.toLocaleString() },\r\n      style: { fontSize: '14px' },\r\n    },\r\n    stroke: {\r\n      show: true,\r\n      width: 2,\r\n      colors: ['#fff'],\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        expandOnClick: true,\r\n        donut: {\r\n          size: '70%',\r\n          labels: {\r\n            show: true,\r\n            name: {\r\n              show: true,\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: 'var(--body-color)',\r\n            },\r\n            value: {\r\n              show: true,\r\n              fontSize: '22px',\r\n              fontWeight: 'bold',\r\n              color: 'var(--body-color)',\r\n              formatter: (val) => {\r\n                return parseFloat(val).toLocaleString();\r\n              },\r\n            },\r\n            total: {\r\n              show: true,\r\n              label: 'Total',\r\n              color: 'var(--body-color)',\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              formatter: () => {\r\n                return totalValue.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        options: {\r\n          chart: {\r\n            height: 300,\r\n          },\r\n          legend: {\r\n            position: 'bottom',\r\n            fontSize: '12px',\r\n          },\r\n          dataLabels: {\r\n            style: {\r\n              fontSize: '12px',\r\n            },\r\n          },\r\n          plotOptions: {\r\n            pie: {\r\n              donut: {\r\n                labels: {\r\n                  name: {\r\n                    fontSize: '14px',\r\n                  },\r\n                  value: {\r\n                    fontSize: '16px',\r\n                  },\r\n                  total: {\r\n                    fontSize: '14px',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Card className=\"pokechart-card shadow-lg p-3 mb-5 rounded\">\r\n      <CardBody>\r\n        <CardTitle tag=\"h3\" className=\"mb-3 text-center\">\r\n          Box Value Summary\r\n        </CardTitle>\r\n        <CardSubtitle className=\"text-muted text-center mb-4\">\r\n          Detailed breakdown of Pokémon categories\r\n        </CardSubtitle>\r\n        <div className=\"chart-container\">\r\n          <Chart\r\n            key={chartKey}\r\n            options={options}\r\n            series={series}\r\n            type=\"donut\"\r\n            height={380}\r\n          />\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PokeChart;\r\n","import { atom } from 'recoil';\r\n\r\nexport const pokemonDetailsState = atom({\r\n  key: 'pokemonDetailsState', \r\n  default: {\r\n    uname: '',\r\n    uid: '',\r\n    totalRating: '',\r\n    consideredPokemon: [],\r\n    ignoredPokemon: [],\r\n  },\r\n});\r\n\r\n\r\nexport const categorizedTotalsState = atom({\r\n    key: 'categorizedTotalsState',\r\n    default: {\r\n      Luminous: 0,\r\n      Cursed: 0,\r\n      Gold: 0,\r\n      Rainbow: 0,\r\n      Shadow: 0,\r\n    },\r\n  });","import React from 'react';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, ListGroup, ListGroupItem } from 'reactstrap';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { pokemonDetailsState } from '../recoil/recoilState'; // Import the Recoil atom\r\n\r\nconst PokemonInBox = () => {\r\n  // Retrieve the data from Recoil\r\n  const pokemonDetails = useRecoilValue(pokemonDetailsState);\r\n\r\n  // Corrected rate conversion function with logging\r\n  const convertRateToNumber = (rateString) => {\r\n    if (!rateString || typeof rateString !== 'string') {\r\n      console.warn(`Invalid rate string: ${rateString}`);\r\n      return 0; // Default to 0 if the rate is not defined or not a string\r\n    }\r\n\r\n    // Extract the numeric part\r\n    const match = rateString.match(/[\\d.]+/);\r\n    if (!match) {\r\n      console.warn(`No numeric value found in rate string: ${rateString}`);\r\n      return 0;\r\n    }\r\n\r\n    const value = parseFloat(match[0]); // Parse the numeric part\r\n\r\n    if (rateString.includes('m')) {\r\n      return value * 1_000_000;\r\n    } else if (rateString.includes('k')) {\r\n      return value * 1_000;\r\n    }\r\n    return value;\r\n  };\r\n\r\n  // Helper function to format numbers back into strings like '1.5k' or '3m'\r\n  const formatRate = (rate) => {\r\n    if (rate >= 1_000_000) {\r\n      return `${(rate / 1_000_000).toFixed(2)}m`;\r\n    } else if (rate >= 1_000) {\r\n      return `${(rate / 1_000).toFixed(2)}k`;\r\n    } else {\r\n      return rate.toFixed(2);\r\n    }\r\n  };\r\n\r\n  // Function to group and format the Pokémon data\r\n  const groupPokemon = (pokemonList) => {\r\n    const grouped = {};\r\n\r\n    pokemonList.forEach((pokemon) => {\r\n      const key = `${pokemon.name} ${pokemon.gender || ''} - Level: ${pokemon.level}`;\r\n      if (!grouped[key]) {\r\n        grouped[key] = { ...pokemon, count: 1 };\r\n      } else {\r\n        grouped[key].count += 1;\r\n      }\r\n    });\r\n\r\n    // Convert the grouped object into an array for rendering\r\n    return Object.entries(grouped).map(([key, details]) => {\r\n      // Ensure that we access the correct property for the rate\r\n      const rateString = details.rate || details.formattedRate;\r\n      const rateValue = convertRateToNumber(rateString);\r\n      const totalRate = rateValue * details.count;\r\n\r\n      // Format the total rate back into a readable format (e.g., 1.5m, 1.5k)\r\n      const formattedTotalRate = formatRate(totalRate);\r\n\r\n      return {\r\n        ...details,\r\n        display: `${details.count}x ${key} [${formattedTotalRate}]`,\r\n      };\r\n    });\r\n  };\r\n\r\n  const renderPokemonList = (pokemonList) => {\r\n    const groupedPokemon = groupPokemon(pokemonList);\r\n\r\n    return groupedPokemon.map((pokemon, index) => (\r\n      <ListGroupItem key={index} className=\"d-flex align-items-center\">\r\n        {pokemon.display}\r\n      </ListGroupItem>\r\n    ));\r\n  };\r\n\r\n  const renderIgnoredPokemon = (ignoredList) => {\r\n    const groupedIgnored = {};\r\n\r\n    ignoredList.forEach((pokemon) => {\r\n      const key = `${pokemon.name} ${pokemon.gender}`;\r\n      if (groupedIgnored[key]) {\r\n        groupedIgnored[key].count += 1;\r\n      } else {\r\n        groupedIgnored[key] = { ...pokemon, count: 1 };\r\n      }\r\n    });\r\n\r\n    return Object.entries(groupedIgnored).map(([key, details], index) => (\r\n      <ListGroupItem key={index} className=\"d-flex align-items-center\">\r\n        {details.count}x {details.name} {details.gender && `${details.gender}`} - Level: {details.level}\r\n      </ListGroupItem>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Card className=\"mt-4\">\r\n      <CardBody>\r\n        <CardTitle tag=\"h5\">Pokemon in Box</CardTitle>\r\n        <CardSubtitle className=\"mb-3 text-muted\" tag=\"h6\">\r\n          Considered and Ignored Pokémon\r\n        </CardSubtitle>\r\n\r\n        <h6 className=\"mt-4\">Considered Pokémon:</h6>\r\n        <ListGroup flush className=\"mb-4\">\r\n          {pokemonDetails.consideredPokemon.length > 0 ? (\r\n            renderPokemonList(pokemonDetails.consideredPokemon)\r\n          ) : (\r\n            <ListGroupItem>No Pokémon considered</ListGroupItem>\r\n          )}\r\n        </ListGroup>\r\n\r\n        <h6 className=\"mt-4\">Ignored Pokémon:</h6>\r\n        <ListGroup flush>\r\n          {pokemonDetails.ignoredPokemon.length > 0 ? (\r\n            renderIgnoredPokemon(pokemonDetails.ignoredPokemon)\r\n          ) : (\r\n            <ListGroupItem>No Pokémon ignored</ListGroupItem>\r\n          )}\r\n        </ListGroup>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PokemonInBox;\r\n","import React, { useState } from 'react';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Alert,\r\n} from 'reactstrap';\r\nimport { pokemonDetailsState, categorizedTotalsState } from '../recoil/recoilState'; // Import the Recoil atoms\r\n\r\nconst BoxRater = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const setPokemonDetails = useSetRecoilState(pokemonDetailsState);\r\n  const setCategorizedTotals = useSetRecoilState(categorizedTotalsState);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    setPokemonDetails({\r\n      uname: '',\r\n      uid: '',\r\n      totalRating: '',\r\n      consideredPokemon: [],\r\n      ignoredPokemon: [],\r\n    });\r\n    setCategorizedTotals({\r\n      Luminous: 0,\r\n      Cursed: 0,\r\n      Gold: 0,\r\n      Rainbow: 0,\r\n      Shadow: 0,\r\n    });\r\n\r\n    if (!username) {\r\n      setMessage('Please enter a valid username.');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`https://pokemoncreed.net/ajax/box.php?user=${username}`);\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        const result = data.data;\r\n        const uname = result.name;\r\n        const uid = result.id;\r\n\r\n        const coloreds = ['Cursed', 'Glitter', 'Golden', 'Luminous', 'Rainbow', 'Shadow'];\r\n        const pokemonList = { base: [], unbase: [], other: [] };\r\n        const findrates = new Set();\r\n\r\n        result.pokemon.forEach((poke) => {\r\n          if (poke.loan === '0' && coloreds.some((color) => poke.name.startsWith(color))) {\r\n            findrates.add(poke.name.toLowerCase());\r\n\r\n            if (poke.level === 5) {\r\n              pokemonList.base.push({ name: poke.name, gender: poke.gender, level: poke.level });\r\n            } else if (poke.level > 5) {\r\n              pokemonList.unbase.push({ name: poke.name, gender: poke.gender, level: poke.level });\r\n            } else {\r\n              pokemonList.other.push({ name: poke.name, gender: poke.gender, level: poke.level });\r\n            }\r\n          }\r\n        });\r\n\r\n        if (pokemonList.base.length + pokemonList.unbase.length + pokemonList.other.length === 0) {\r\n          setMessage(`${uname} - #${uid} has no colored Pokémon to rate!`);\r\n        } else {\r\n          const foundRates = await fetchRates(Array.from(findrates));\r\n          const results = calculateAndFormatRatings(pokemonList, foundRates);\r\n          console.log(results)\r\n          // Calculate and set the categorized totals\r\n          const categorizedValues = categorizePokemon(results.consideredPokemon);\r\n          setCategorizedTotals(categorizedValues);\r\n\r\n          // Update the Recoil state with Pokémon details\r\n          setPokemonDetails({\r\n            uname,\r\n            uid,\r\n            totalRating: results.totalRating,\r\n            consideredPokemon: results.consideredPokemon,\r\n            ignoredPokemon: results.ignoredPokemon,\r\n          });\r\n\r\n          setMessage(`Total Rating for ${uname}: ${results.totalRating}`);\r\n        }\r\n      } else {\r\n        setMessage('Username not found!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setMessage('An error occurred while fetching data.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchRates = async (findrates) => {\r\n    const ratePromises = findrates.map((pokeName) =>\r\n      fetch(`https://pokemoncreed.net/ajax/pokedex.php?pokemon=${pokeName}`)\r\n        .then((response) => response.json())\r\n        .then((rateData) => {\r\n          const rate = rateData.rating || '0';\r\n          const formattedRate =\r\n            rate.includes('m') ? parseFloat(rate) * 1_000_000 : parseFloat(rate.replace('k', '')) * 1_000;\r\n          return { [pokeName]: formattedRate };\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Error fetching rate for ${pokeName}:`, error);\r\n          return { [pokeName]: 0 };\r\n        })\r\n    );\r\n\r\n    const ratesArray = await Promise.all(ratePromises);\r\n    return ratesArray.reduce((acc, rate) => ({ ...acc, ...rate }), {});\r\n  };\r\n\r\n  \r\n\r\n  const calculateAndFormatRatings = (pokemonList, foundRates) => {\r\n    let totalRating = 0;\r\n    const consideredPokemon = [];\r\n    const ignoredPokemon = [];\r\n\r\n    for (const category in pokemonList) {\r\n      for (const poke of pokemonList[category]) {\r\n        const rate = foundRates[poke.name.toLowerCase()] || 0;\r\n        let finalRate = rate;\r\n  \r\n        if (poke.level < 5) {\r\n          finalRate *= 3; // 3x multiplier for level 4 or less\r\n        } else if (category === 'unbase') {\r\n          finalRate *= 0.8; // 0.8x multiplier for unbase\r\n        }\r\n  \r\n        if (finalRate > 0) {\r\n          totalRating += finalRate;\r\n          consideredPokemon.push({\r\n            count: 1,\r\n            name: poke.name,\r\n            gender: poke.gender,\r\n            level: poke.level,\r\n            formattedRate: formatNumber(finalRate),\r\n          });\r\n        } else {\r\n          ignoredPokemon.push({\r\n            count: 1,\r\n            name: poke.name,\r\n            gender: poke.gender,\r\n            level: poke.level,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      totalRating: formatNumber(totalRating),\r\n      consideredPokemon,\r\n      ignoredPokemon,\r\n    };\r\n  };\r\n\r\n  const formatNumber = (num) => {\r\n    if (num >= 1_000_000) {\r\n      return (num / 1_000_000).toFixed(2) + 'm';\r\n    } else if (num >= 1_000) {\r\n      return (num / 1_000).toFixed(2) + 'k';\r\n    } else {\r\n      return num.toString();\r\n    }\r\n  };\r\n\r\n  const categorizePokemon = (pokemonList) => {\r\n    const categories = {\r\n      Luminous: 0,\r\n      Cursed: 0,\r\n      Gold: 0,\r\n      Rainbow: 0,\r\n      Shadow: 0,\r\n    };\r\n\r\n    pokemonList.forEach((pokemon) => {\r\n      let rateValue = 0;\r\n      const formattedRate = pokemon.formattedRate.toLowerCase();\r\n  \r\n      if (formattedRate.endsWith('k')) {\r\n        rateValue = parseFloat(formattedRate.replace('k', '')) * 1_000;\r\n      } else if (formattedRate.endsWith('m')) {\r\n        rateValue = parseFloat(formattedRate.replace('m', '')) * 1_000_000;\r\n      } else {\r\n        rateValue = parseFloat(formattedRate);\r\n      }\r\n  \r\n      if (pokemon.name.toLowerCase().includes('luminous')) {\r\n        categories.Luminous += rateValue;\r\n      } else if (pokemon.name.toLowerCase().includes('cursed')) {\r\n        categories.Cursed += rateValue;\r\n      } else if (pokemon.name.toLowerCase().includes('golden')) {\r\n        categories.Gold += rateValue;\r\n      } else if (pokemon.name.toLowerCase().includes('rainbow')) {\r\n        categories.Rainbow += rateValue;\r\n      } else if (pokemon.name.toLowerCase().includes('shadow')) {\r\n        categories.Shadow += rateValue;\r\n      }\r\n    });\r\n\r\n    return categories;\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <Card >\r\n        <CardBody>\r\n          <CardTitle tag=\"h2\" className=\"mb-4 text-center\">\r\n            Rate Box\r\n          </CardTitle>\r\n  \r\n          <Form onSubmit={handleSubmit}>\r\n            <FormGroup className=\"mb-3\">\r\n              <Label for=\"username\">Username:</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"username\"\r\n                id=\"username\"\r\n                placeholder=\"Enter username\"\r\n                value={username}\r\n                onChange={(e) => setUsername(e.target.value)}\r\n                required\r\n              />\r\n            </FormGroup>\r\n            <Button type=\"submit\" color=\"primary\" disabled={loading} block>\r\n              {loading ? 'Loading...' : 'Rate Box'}\r\n            </Button>\r\n          </Form>\r\n          {message && (\r\n            <Alert color=\"info\" className=\"mt-4\">\r\n              {message}\r\n            </Alert>\r\n          )}\r\n          <Label>\r\n          <p >\r\n            <strong>NOTE:</strong> Unbase: 0.8x Rate List | Level 4 or less: 3x Rate List | Genderless/Special Genders are rated normally.\r\n          </p>\r\n          </Label>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default BoxRater;\r\n","import { Col, Row } from \"reactstrap\";\r\nimport PokeChart from \"../components/boxrater/PokeChart\";\r\nimport Feeds from \"../components/boxrater/PokemonInBox\";\r\nimport ProjectTables from \"../components/boxrater/BoxRater\";\r\nimport { RecoilRoot } from \"recoil\";\r\n\r\n\r\nconst BoxRater = () => {\r\n  return (\r\n    <RecoilRoot>\r\n      \r\n       <Row>\r\n        <Col lg=\"12\">\r\n          <ProjectTables />\r\n        </Col>\r\n      </Row>\r\n      \r\n      <Row>\r\n        <Col lg=\"12\">\r\n          <PokeChart />\r\n        </Col>\r\n        <Col lg=\"12\">\r\n          <Feeds />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n      </Row>\r\n    </RecoilRoot>\r\n  );\r\n};\r\n\r\nexport default BoxRater;\r\n"],"names":["PokeChart","categorizedTotals","useRecoilValue","categorizedTotalsState","series","Object","values","map","value","parseFloat","totalValue","reduce","a","b","chartKey","entries","_ref","key","join","options","chart","background","toolbar","show","animations","enabled","easing","speed","animateGradually","delay","labels","keys","colors","legend","position","fontSize","markers","width","height","radius","itemMargin","horizontal","vertical","dataLabels","formatter","val","toLocaleString","dropShadow","style","fontWeight","tooltip","theme","y","stroke","plotOptions","pie","expandOnClick","donut","size","name","color","total","label","responsive","breakpoint","_jsx","Card","className","children","_jsxs","CardBody","CardTitle","tag","CardSubtitle","Chart","type","pokemonDetailsState","atom","default","uname","uid","totalRating","consideredPokemon","ignoredPokemon","Luminous","Cursed","Gold","Rainbow","Shadow","PokemonInBox","pokemonDetails","groupPokemon","pokemonList","grouped","forEach","pokemon","gender","level","count","details","rateValue","rateString","console","warn","match","includes","convertRateToNumber","rate","formattedRate","totalRate","formattedTotalRate","toFixed","display","ListGroup","flush","length","index","ListGroupItem","ignoredList","groupedIgnored","_ref2","renderIgnoredPokemon","BoxRater","username","setUsername","useState","message","setMessage","loading","setLoading","setPokemonDetails","useSetRecoilState","setCategorizedTotals","fetchRates","async","ratePromises","findrates","pokeName","fetch","then","response","json","rateData","rating","replace","catch","error","Promise","all","acc","calculateAndFormatRatings","foundRates","category","poke","finalRate","toLowerCase","push","formatNumber","num","toString","categorizePokemon","categories","endsWith","Form","onSubmit","e","preventDefault","data","success","result","id","coloreds","base","unbase","other","Set","loan","some","startsWith","add","Array","from","results","log","categorizedValues","FormGroup","Label","for","Input","placeholder","onChange","target","required","Button","disabled","block","Alert","RecoilRoot","Row","Col","lg","ProjectTables","Feeds"],"sourceRoot":""}