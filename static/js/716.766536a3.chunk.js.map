{"version":3,"file":"static/js/716.766536a3.chunk.js","mappings":"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","sources":["components/boxrater/PokeChart.js","components/recoil/recoilState.js","pages/QuickTrade.js"],"sourcesContent":["import React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { categorizedTotalsState } from '../recoil/recoilState';\r\nimport { Card, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\r\nimport Chart from 'react-apexcharts';\r\nimport '../../assets/scss/pokechart.scss'; \r\n\r\nconst PokeChart = () => {\r\n  const categorizedTotals = useRecoilValue(categorizedTotalsState);\r\n\r\n  // Calculate the series and total value\r\n  const series = Object.values(categorizedTotals).map((value) => parseFloat(value));\r\n  const totalValue = series.reduce((a, b) => a + b, 0);\r\n\r\n  // Generate a key based on categorizedTotals to force re-render\r\n  const chartKey = Object.entries(categorizedTotals)\r\n    .map(([key, value]) => `${key}-${value}`)\r\n    .join('_');\r\n\r\n  const options = {\r\n    chart: {\r\n      background: 'transparent',\r\n      toolbar: { show: false },\r\n      animations: {\r\n        enabled: true,\r\n        easing: 'easeinout',\r\n        speed: 800,\r\n        animateGradually: { enabled: true, delay: 150 },\r\n      },\r\n    },\r\n    labels: Object.keys(categorizedTotals),\r\n    colors: [\r\n      '#2de7e0', \r\n      '#b71515', \r\n      '#ffc107', \r\n      '#28a745', \r\n      '#573c9c', \r\n    ],\r\n    legend: {\r\n      show: true,\r\n      position: 'bottom',\r\n      fontSize: '14px',\r\n      labels: { colors: ['var(--body-color)'] },\r\n      markers: { width: 10, height: 10, radius: 5 },\r\n      itemMargin: { horizontal: 10, vertical: 5 },\r\n    },\r\n    dataLabels: {\r\n      enabled: true,\r\n      formatter: (val) => val.toLocaleString(),\r\n      dropShadow: {\r\n        enabled: false,\r\n      },\r\n      style: {\r\n        fontSize: '14px',\r\n        fontWeight: '600',\r\n        colors: ['var(--body-color)'],\r\n      },\r\n      background: {\r\n        enabled: false,\r\n      },\r\n    },\r\n    tooltip: {\r\n      theme: 'dark',\r\n      y: { formatter: (val) => val.toLocaleString() },\r\n      style: { fontSize: '14px' },\r\n    },\r\n    stroke: {\r\n      show: true,\r\n      width: 2,\r\n      colors: ['#fff'],\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        expandOnClick: true,\r\n        donut: {\r\n          size: '70%',\r\n          labels: {\r\n            show: true,\r\n            name: {\r\n              show: true,\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              color: 'var(--body-color)',\r\n            },\r\n            value: {\r\n              show: true,\r\n              fontSize: '22px',\r\n              fontWeight: 'bold',\r\n              color: 'var(--body-color)',\r\n              formatter: (val) => {\r\n                return parseFloat(val).toLocaleString();\r\n              },\r\n            },\r\n            total: {\r\n              show: true,\r\n              label: 'Total',\r\n              color: 'var(--body-color)',\r\n              fontSize: '18px',\r\n              fontWeight: 'bold',\r\n              formatter: () => {\r\n                return totalValue.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        options: {\r\n          chart: {\r\n            height: 300,\r\n          },\r\n          legend: {\r\n            position: 'bottom',\r\n            fontSize: '12px',\r\n          },\r\n          dataLabels: {\r\n            style: {\r\n              fontSize: '12px',\r\n            },\r\n          },\r\n          plotOptions: {\r\n            pie: {\r\n              donut: {\r\n                labels: {\r\n                  name: {\r\n                    fontSize: '14px',\r\n                  },\r\n                  value: {\r\n                    fontSize: '16px',\r\n                  },\r\n                  total: {\r\n                    fontSize: '14px',\r\n                  },\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Card className=\"pokechart-card shadow-lg p-3 mb-5 rounded\">\r\n      <CardBody>\r\n        <CardTitle tag=\"h3\" className=\"mb-3 text-center\">\r\n          Box Value Summary\r\n        </CardTitle>\r\n        <CardSubtitle className=\"text-muted text-center mb-4\">\r\n          Detailed breakdown of Pokémon categories\r\n        </CardSubtitle>\r\n        <div className=\"chart-container\">\r\n          <Chart\r\n            key={chartKey}\r\n            options={options}\r\n            series={series}\r\n            type=\"donut\"\r\n            height={380}\r\n          />\r\n        </div>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PokeChart;\r\n","import { atom } from 'recoil';\r\n\r\nexport const pokemonDetailsState = atom({\r\n  key: 'pokemonDetailsState', \r\n  default: {\r\n    uname: '',\r\n    uid: '',\r\n    totalRating: '',\r\n    consideredPokemon: [],\r\n    ignoredPokemon: [],\r\n  },\r\n});\r\n\r\n\r\nexport const categorizedTotalsState = atom({\r\n    key: 'categorizedTotalsState',\r\n    default: {\r\n      Luminous: 0,\r\n      Cursed: 0,\r\n      Gold: 0,\r\n      Rainbow: 0,\r\n      Shadow: 0,\r\n    },\r\n  });","// QuickTrade.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Alert,\r\n  Col,\r\n  Row,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Spinner,\r\n  Collapse,\r\n  UncontrolledTooltip,\r\n} from 'reactstrap';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { categorizedTotalsState } from '../components/recoil/recoilState'; // Import the Recoil atom\r\nimport PokeChart from '../components/boxrater/PokeChart'; // Import the PokeChart component\r\n\r\nconst QuickTrade = () => {\r\n  // State for 'Trading For' portion\r\n  const [tradingForList, setTradingForList] = useState([\r\n    { id: 1, type: 'Golden', name: '', cost: '', currency: 'K' },\r\n  ]);\r\n\r\n  const [totalTradingForValue, setTotalTradingForValue] = useState(0);\r\n\r\n  // State for username and options\r\n  const [username, setUsername] = useState('');\r\n  const [excludedTypes, setExcludedTypes] = useState({\r\n    Golden: false,\r\n    Cursed: false,\r\n    Luminous: false,\r\n    Shadow: false,\r\n    Rainbow: false,\r\n    unbased: false,\r\n  });\r\n\r\n  const [usePercentages, setUsePercentages] = useState(false);\r\n\r\n  const [percentages, setPercentages] = useState({\r\n    Golden: 20,\r\n    Cursed: 20,\r\n    Luminous: 20,\r\n    Shadow: 20,\r\n    Rainbow: 20,\r\n  });\r\n\r\n  const [excludePokemonList, setExcludePokemonList] = useState([]);\r\n  const [excludePokemon, setExcludePokemon] = useState({\r\n    type: 'Golden',\r\n    name: '',\r\n  });\r\n\r\n  const [message, setMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // State for trade suggestions\r\n  const [tradeSuggestions, setTradeSuggestions] = useState([]);\r\n  const [tradingForDetails, setTradingForDetails] = useState([]);\r\n\r\n  // Rates cache to reduce API calls\r\n  const ratesCacheRef = useRef({});\r\n\r\n  // Recoil state setters\r\n  const setCategorizedTotals = useSetRecoilState(categorizedTotalsState);\r\n\r\n  // Handle changes in 'Trading For' list\r\n  const handleTradingForChange = (id, field, value) => {\r\n    setTradingForList((prevList) =>\r\n      prevList.map((item) => (item.id === id ? { ...item, [field]: value } : item))\r\n    );\r\n  };\r\n\r\n  // Add a new item to 'Trading For' list\r\n  const addTradingForItem = () => {\r\n    setTradingForList((prevList) => [\r\n      ...prevList,\r\n      {\r\n        id: prevList.length > 0 ? prevList[prevList.length - 1].id + 1 : 1,\r\n        type: 'Golden',\r\n        name: '',\r\n        cost: '',\r\n        currency: 'K',\r\n      },\r\n    ]);\r\n  };\r\n\r\n  // Remove an item from 'Trading For' list\r\n  const removeTradingForItem = (id) => {\r\n    setTradingForList((prevList) => prevList.filter((item) => item.id !== id));\r\n  };\r\n\r\n  // Fetch cost if the cost field is empty\r\n  const fetchCostIfEmpty = async (id) => {\r\n    const item = tradingForList.find((i) => i.id === id);\r\n    if (item && item.cost.trim() === '') {\r\n      const { type, name } = item;\r\n      if (name.trim() !== '') {\r\n        const combinedName = `${type}${name}`;\r\n        try {\r\n          const response = await fetch(\r\n            `https://pokemoncreed.net/ajax/pokedex.php?pokemon=${encodeURIComponent(\r\n              combinedName.toLowerCase()\r\n            )}`\r\n          );\r\n          const data = await response.json();\r\n          const rate = data.rating || 'N/A';\r\n          if (rate === 'N/A') {\r\n            setMessage(`Rate for ${combinedName} is not available.`);\r\n            return;\r\n          }\r\n          let formattedCost;\r\n          let currency;\r\n          if (rate.includes('m')) {\r\n            formattedCost = parseFloat(rate.replace('m', '')); // e.g., '1.5m' => 1.5\r\n            currency = 'M';\r\n          } else if (rate.includes('k')) {\r\n            formattedCost = parseFloat(rate.replace('k', '')); // e.g., '500k' => 500\r\n            currency = 'K';\r\n          } else {\r\n            formattedCost = parseFloat(rate);\r\n            currency = '';\r\n          }\r\n          // Update the cost field\r\n          setTradingForList((prevList) =>\r\n            prevList.map((i) =>\r\n              i.id === id ? { ...i, cost: formattedCost.toString(), currency } : i\r\n            )\r\n          );\r\n        } catch (error) {\r\n          console.error('Error fetching cost:', error);\r\n          setMessage(`Error fetching cost for ${combinedName}.`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fetch costs for all items with empty cost fields before generating suggestions\r\n  const fetchCostsForAll = async () => {\r\n    const fetchPromises = tradingForList.map(async (item) => {\r\n      if (item.cost.trim() === '') {\r\n        await fetchCostIfEmpty(item.id);\r\n      }\r\n    });\r\n    await Promise.all(fetchPromises);\r\n  };\r\n\r\n  // Calculate total 'Trading For' value whenever the list changes\r\n  useEffect(() => {\r\n    let total = 0;\r\n    tradingForList.forEach((item) => {\r\n      let cost = parseFloat(item.cost);\r\n      if (isNaN(cost)) cost = 0;\r\n      if (item.currency === 'M') {\r\n        cost *= 1_000_000;\r\n      } else if (item.currency === 'K') {\r\n        cost *= 1_000;\r\n      }\r\n      total += cost;\r\n    });\r\n    setTotalTradingForValue(total);\r\n  }, [tradingForList]);\r\n\r\n  // Handle exclude type changes\r\n  const handleExcludeTypeChange = (type, checked) => {\r\n    setExcludedTypes((prev) => ({\r\n      ...prev,\r\n      [type]: checked,\r\n    }));\r\n\r\n    // Adjust percentages\r\n    setPercentages((prevPercentages) => {\r\n      const newPercentages = { ...prevPercentages };\r\n\r\n      if (checked) {\r\n        // Type is being excluded\r\n        const excludedPercentage = newPercentages[type] || 0;\r\n        delete newPercentages[type];\r\n\r\n        const remainingTypes = Object.keys(newPercentages);\r\n        const totalRemaining = remainingTypes.reduce(\r\n          (sum, t) => sum + newPercentages[t],\r\n          0\r\n        );\r\n\r\n        // Redistribute the excluded percentage among remaining types proportionally\r\n        remainingTypes.forEach((t) => {\r\n          newPercentages[t] += (newPercentages[t] / totalRemaining) * excludedPercentage;\r\n        });\r\n      } else {\r\n        // Type is being included\r\n        const includedTypes = Object.keys(newPercentages);\r\n        const totalIncluded = includedTypes.reduce(\r\n          (sum, t) => sum + newPercentages[t],\r\n          0\r\n        );\r\n\r\n        // Add the type with 0% initially\r\n        newPercentages[type] = 0;\r\n\r\n        // Adjust percentages to sum to 100%\r\n        Object.keys(newPercentages).forEach((t) => {\r\n          newPercentages[t] = (newPercentages[t] / totalIncluded) * 100;\r\n        });\r\n      }\r\n\r\n      return newPercentages;\r\n    });\r\n  };\r\n\r\n  // Handle percentage changes\r\n  const handlePercentageChange = (type, value) => {\r\n    value = Number(value);\r\n    if (value < 0) value = 0;\r\n    if (value > 100) value = 100;\r\n\r\n    setPercentages((prevPercentages) => {\r\n      const adjustedPercentages = { ...prevPercentages };\r\n      const oldValue = adjustedPercentages[type];\r\n      const diff = value - oldValue;\r\n      adjustedPercentages[type] = value;\r\n\r\n      const otherTypes = Object.keys(adjustedPercentages).filter(\r\n        (t) => t !== type && !excludedTypes[t]\r\n      );\r\n\r\n      let totalOtherPercentages = otherTypes.reduce(\r\n        (sum, t) => sum + adjustedPercentages[t],\r\n        0\r\n      );\r\n\r\n      otherTypes.forEach((t) => {\r\n        const proportion = adjustedPercentages[t] / totalOtherPercentages || 0;\r\n        adjustedPercentages[t] -= proportion * diff;\r\n        if (adjustedPercentages[t] < 0) adjustedPercentages[t] = 0;\r\n        if (adjustedPercentages[t] > 100) adjustedPercentages[t] = 100;\r\n      });\r\n\r\n      // Normalize percentages to sum to 100%\r\n      const totalPercentage = Object.values(adjustedPercentages).reduce(\r\n        (a, b) => a + b,\r\n        0\r\n      );\r\n      if (totalPercentage !== 100) {\r\n        const adjustment = 100 - totalPercentage;\r\n        // Adjust the first non-excluded type\r\n        for (const t of Object.keys(adjustedPercentages)) {\r\n          if (t !== type && !excludedTypes[t]) {\r\n            adjustedPercentages[t] += adjustment;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return adjustedPercentages;\r\n    });\r\n  };\r\n\r\n  // Add a Pokémon to exclude list\r\n  const addPokemonToExclude = () => {\r\n    if (excludePokemon.name.trim() !== '') {\r\n      setExcludePokemonList((prevList) => [...prevList, { ...excludePokemon }]);\r\n      setExcludePokemon({ type: 'Golden', name: '' });\r\n    }\r\n  };\r\n\r\n  // Remove a Pokémon from exclude list\r\n  const removeExcludedPokemon = (index) => {\r\n    setExcludePokemonList((prevList) => prevList.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // Format numbers with K, M suffixes\r\n  const formatNumber = (num) => {\r\n    if (num >= 1_000_000) {\r\n      return (num / 1_000_000).toFixed(2) + 'M';\r\n    } else if (num >= 1_000) {\r\n      return (num / 1_000).toFixed(2) + 'K';\r\n    } else {\r\n      return num.toString();\r\n    }\r\n  };\r\n\r\n  // Function to group and format the Pokémon data\r\n  const groupPokemon = (pokemonList) => {\r\n    const grouped = {};\r\n    const typeTotals = {\r\n      Luminous: 0,\r\n      Cursed: 0,\r\n      Golden: 0,\r\n      Rainbow: 0,\r\n      Shadow: 0,\r\n    };\r\n\r\n    pokemonList.forEach((pokemon) => {\r\n      const key = `${pokemon.name} ${pokemon.gender || ''} - Level: ${pokemon.level}`;\r\n      if (!grouped[key]) {\r\n        grouped[key] = { ...pokemon, count: 1 };\r\n      } else {\r\n        grouped[key].count += 1;\r\n      }\r\n\r\n      // Calculate totals per type for the chart\r\n      if (typeTotals[pokemon.type] !== undefined) {\r\n        typeTotals[pokemon.type] += pokemon.rate;\r\n      }\r\n    });\r\n\r\n    // Update the categorized totals state in Recoil\r\n    setCategorizedTotals(typeTotals);\r\n\r\n    // Convert the grouped object into an array for rendering\r\n    return Object.entries(grouped).map(([key, details]) => {\r\n      const totalRate = details.rate * details.count;\r\n      return {\r\n        ...details,\r\n        display: `${details.count}x ${details.name} ${\r\n          details.gender ? `(${details.gender})` : ''\r\n        } - Level: ${details.level} [${formatNumber(totalRate)}]`,\r\n      };\r\n    });\r\n  };\r\n\r\n  // Main function to get trade suggestions\r\n  const handleGetTradeSuggestions = async () => {\r\n    setLoading(true);\r\n    setMessage('');\r\n    setTradeSuggestions([]);\r\n    setTradingForDetails(tradingForList);\r\n\r\n    // Fetch costs for all items with empty cost fields\r\n    await fetchCostsForAll();\r\n\r\n    // Recalculate total trading value\r\n    let total = 0;\r\n    tradingForList.forEach((item) => {\r\n      let cost = parseFloat(item.cost);\r\n      if (isNaN(cost)) cost = 0;\r\n      if (item.currency === 'M') {\r\n        cost *= 1_000_000;\r\n      } else if (item.currency === 'K') {\r\n        cost *= 1_000;\r\n      }\r\n      total += cost;\r\n    });\r\n    setTotalTradingForValue(total);\r\n\r\n    try {\r\n      // Fetch the user's box\r\n      const response = await fetch(\r\n        `https://pokemoncreed.net/ajax/box.php?user=${username}`\r\n      );\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        const result = data.data;\r\n        const uname = result.name;\r\n\r\n        // Excluded types and Pokémon\r\n        const excludedTypeList = Object.keys(excludedTypes).filter(\r\n          (type) => excludedTypes[type]\r\n        );\r\n\r\n        // Map of excluded Pokémon names with types\r\n        const excludedPokemonMap = {};\r\n        excludePokemonList.forEach((item) => {\r\n          const key = `${item.type.toLowerCase()}${item.name.toLowerCase()}`;\r\n          excludedPokemonMap[key] = true;\r\n        });\r\n\r\n        const coloreds = ['Cursed', 'Golden', 'Luminous', 'Rainbow', 'Shadow'];\r\n\r\n        let availablePokemon = [];\r\n\r\n        // Process the box\r\n        result.pokemon.forEach((poke) => {\r\n          if (poke.loan === '0') {\r\n            const pokeName = poke.name;\r\n            const lowerPokeName = pokeName.toLowerCase();\r\n\r\n            // Check if the Pokémon is of a colored type\r\n            const pokeType = coloreds.find((color) =>\r\n              lowerPokeName.startsWith(color.toLowerCase())\r\n            );\r\n            if (pokeType && !excludedTypeList.includes(pokeType)) {\r\n              // Check if the Pokémon is in the excluded Pokémon list\r\n              const nameWithoutType = lowerPokeName.replace(\r\n                pokeType.toLowerCase(),\r\n                ''\r\n              );\r\n              const excludeKey = `${pokeType.toLowerCase()}${nameWithoutType}`;\r\n              if (!excludedPokemonMap[excludeKey]) {\r\n                // Check for unbased exclusion\r\n                if (!(excludedTypes['unbased'] && poke.level > 5)) {\r\n                  availablePokemon.push({\r\n                    name: poke.name,\r\n                    gender: poke.gender,\r\n                    level: poke.level,\r\n                    type: pokeType,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        if (availablePokemon.length === 0) {\r\n          setMessage(`${uname} has no available Pokémon for trading.`);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Fetch rates for available Pokémon\r\n        const foundRates = await fetchRates(\r\n          Array.from(new Set(availablePokemon.map((p) => p.name.toLowerCase())))\r\n        );\r\n\r\n        // Attach rates to Pokémon\r\n        availablePokemon = availablePokemon.map((poke) => ({\r\n          ...poke,\r\n          rate: foundRates[poke.name.toLowerCase()] || 0,\r\n        }));\r\n\r\n        // Filter out Pokémon with zero rate\r\n        availablePokemon = availablePokemon.filter((poke) => poke.rate > 0);\r\n\r\n        let selectedPokemon = [];\r\n\r\n        if (usePercentages) {\r\n          // Selection based on percentages\r\n          // Group Pokémon by type\r\n          const pokemonByType = {};\r\n          const includedTypes = Object.keys(percentages);\r\n          includedTypes.forEach((type) => {\r\n            pokemonByType[type] = availablePokemon.filter(\r\n              (poke) => poke.type === type\r\n            );\r\n          });\r\n\r\n          // Select Pokémon based on percentages without exceeding total value\r\n          const desiredValuesByType = {};\r\n          // Total percentage is guaranteed to be 100%\r\n          for (const type of includedTypes) {\r\n            const percentage = percentages[type] / 100;\r\n            desiredValuesByType[type] = totalTradingForValue * percentage;\r\n          }\r\n\r\n          let remainingValue = totalTradingForValue;\r\n\r\n          for (const type of includedTypes) {\r\n            let desiredValue = desiredValuesByType[type];\r\n            let accumulatedValue = 0;\r\n\r\n            // Sort Pokémon by rate descending\r\n            pokemonByType[type].sort((a, b) => b.rate - a.rate);\r\n\r\n            for (const poke of pokemonByType[type]) {\r\n              if (accumulatedValue >= desiredValue || remainingValue <= 0) break;\r\n              if (accumulatedValue + poke.rate > desiredValue) continue;\r\n              selectedPokemon.push(poke);\r\n              accumulatedValue += poke.rate;\r\n              remainingValue -= poke.rate;\r\n            }\r\n          }\r\n\r\n          // If we have not met the total value, try to add more Pokémon without exceeding the total value\r\n          if (remainingValue > 0) {\r\n            const remainingPokemon = availablePokemon.filter(\r\n              (poke) => !selectedPokemon.includes(poke)\r\n            );\r\n\r\n            // Sort remaining Pokémon by rate descending\r\n            remainingPokemon.sort((a, b) => b.rate - a.rate);\r\n\r\n            for (const poke of remainingPokemon) {\r\n              if (remainingValue <= 0) break;\r\n              if (selectedPokemon.includes(poke)) continue;\r\n              if (poke.rate <= remainingValue) {\r\n                selectedPokemon.push(poke);\r\n                remainingValue -= poke.rate;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          // Selection without considering percentages\r\n          let remainingValue = totalTradingForValue;\r\n\r\n          // Sort all available Pokémon by rate descending\r\n          let allAvailablePokemon = availablePokemon\r\n            .slice()\r\n            .sort((a, b) => b.rate - a.rate);\r\n\r\n          for (const poke of allAvailablePokemon) {\r\n            if (remainingValue <= 0) break;\r\n            if (poke.rate <= remainingValue) {\r\n              selectedPokemon.push(poke);\r\n              remainingValue -= poke.rate;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Group selected Pokémon and update categorized totals\r\n        const groupedPokemon = groupPokemon(selectedPokemon);\r\n\r\n        setTradeSuggestions(groupedPokemon);\r\n        setMessage('Trade suggestions generated successfully.');\r\n      } else {\r\n        setMessage('Username not found!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setMessage('An error occurred while fetching data.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to fetch rates\r\n  const fetchRates = async (pokeNames) => {\r\n    const ratesCache = ratesCacheRef.current;\r\n    const ratePromises = pokeNames.map(async (pokeName) => {\r\n      if (ratesCache[pokeName]) {\r\n        // Return cached rate\r\n        return { [pokeName]: ratesCache[pokeName] };\r\n      } else {\r\n        // Fetch rate from API\r\n        return fetch(\r\n          `https://pokemoncreed.net/ajax/pokedex.php?pokemon=${encodeURIComponent(\r\n            pokeName\r\n          )}`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((rateData) => {\r\n            const rate = rateData.rating || 'N/A';\r\n            if (rate === 'N/A') {\r\n              ratesCache[pokeName] = 0;\r\n              return { [pokeName]: 0 };\r\n            }\r\n            let formattedRate;\r\n            if (rate.includes('m')) {\r\n              formattedRate = parseFloat(rate.replace('m', '')) * 1_000_000;\r\n            } else if (rate.includes('k')) {\r\n              formattedRate = parseFloat(rate.replace('k', '')) * 1_000;\r\n            } else {\r\n              formattedRate = parseFloat(rate);\r\n            }\r\n            ratesCache[pokeName] = formattedRate;\r\n            return { [pokeName]: formattedRate };\r\n          })\r\n          .catch((error) => {\r\n            console.error(`Error fetching rate for ${pokeName}:`, error);\r\n            ratesCache[pokeName] = 0;\r\n            return { [pokeName]: 0 };\r\n          });\r\n      }\r\n    });\r\n\r\n    const ratesArray = await Promise.all(ratePromises);\r\n    return ratesArray.reduce((acc, rate) => ({ ...acc, ...rate }), {});\r\n  };\r\n\r\n  return (\r\n    <Card className=\"shadow-lg p-4 mb-5 rounded\">\r\n      <CardBody>\r\n        <CardTitle tag=\"h2\" className=\"mb-4 text-center\">\r\n          Quick Trade\r\n        </CardTitle>\r\n        <Form>\r\n          <Row form className=\"align-items-center mb-4\">\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"username\">User to Trade With:</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  id=\"username\"\r\n                  placeholder=\"Enter username\"\r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                  required\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6} className=\"text-md-right\">\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={handleGetTradeSuggestions}\r\n                disabled={loading}\r\n                className=\"mt-3 mt-md-0\"\r\n              >\r\n                {loading ? (\r\n                  <>\r\n                    <Spinner size=\"sm\" /> Generating Suggestions...\r\n                  </>\r\n                ) : (\r\n                  'Get Trade Suggestions'\r\n                )}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* Trading For Section */}\r\n          <Card className=\"mb-4\">\r\n            <CardBody>\r\n              <CardTitle tag=\"h4\" className=\"mb-3\">\r\n                Trading For\r\n               \r\n              </CardTitle>\r\n  \r\n              {tradingForList.map((item, index) => (\r\n                <Row form key={item.id} className=\"align-items-end\">\r\n                  <Col md={2}>\r\n                    <FormGroup>\r\n                      <Label for={`type-${item.id}`}>Type</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id={`type-${item.id}`}\r\n                        value={item.type}\r\n                        onChange={(e) => handleTradingForChange(item.id, 'type', e.target.value)}\r\n                      >\r\n                        <option>Golden</option>\r\n                        <option>Cursed</option>\r\n                        <option>Luminous</option>\r\n                        <option>Shadow</option>\r\n                        <option>Rainbow</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <FormGroup>\r\n                      <Label for={`name-${item.id}`}>Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        id={`name-${item.id}`}\r\n                        value={item.name}\r\n                        onChange={(e) => handleTradingForChange(item.id, 'name', e.target.value)}\r\n                        onBlur={() => fetchCostIfEmpty(item.id)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <FormGroup>\r\n                      <Label for={`cost-${item.id}`}>Cost</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        id={`cost-${item.id}`}\r\n                        value={item.cost}\r\n                        onChange={(e) => handleTradingForChange(item.id, 'cost', e.target.value)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={1}>\r\n                    <FormGroup>\r\n                      <Label for={`currency-${item.id}`}>Currency</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id={`currency-${item.id}`}\r\n                        value={item.currency}\r\n                        onChange={(e) =>\r\n                          handleTradingForChange(item.id, 'currency', e.target.value)\r\n                        }\r\n                      >\r\n                        <option>K</option>\r\n                        <option>M</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={1}>\r\n                    {tradingForList.length > 1 && (\r\n                      <Button\r\n                        color=\"danger\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeTradingForItem(item.id)}\r\n                        className=\"mt-2\"\r\n                      >\r\n                        Remove\r\n                      </Button>\r\n                    )}\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n              <Button\r\n              color=\"success\"\r\n              size=\"sm\"\r\n              onClick={addTradingForItem}\r\n              className=\"mt-3\"\r\n              >\r\n                + Add Item\r\n                </Button>\r\n      \r\n              <h5 className=\"mt-4\">\r\n                Total Trading For Value: {formatNumber(totalTradingForValue)}\r\n              </h5>\r\n            </CardBody>\r\n          </Card>\r\n          <Card className=\"mb-4\">\r\n            <CardBody>\r\n              <CardTitle tag=\"h4\">Exclude Options</CardTitle>\r\n              <FormGroup>\r\n                <Label>Exclude Types:</Label>\r\n                <div>\r\n                  {Object.keys(excludedTypes).map((type) => (\r\n                    <FormGroup check inline key={type}>\r\n                      <Label check>\r\n                        <Input\r\n                          type=\"checkbox\"\r\n                          checked={excludedTypes[type]}\r\n                          onChange={(e) => handleExcludeTypeChange(type, e.target.checked)}\r\n                        />{' '}\r\n                        {type}\r\n                      </Label>\r\n                    </FormGroup>\r\n                  ))}\r\n                  <Button\r\n                    id=\"excludeInfo\"\r\n                    color=\"link\"\r\n                    className=\"text-info p-0 ml-2\"\r\n                    size=\"sm\"\r\n                  >\r\n                    <i className=\"fas fa-info-circle\"></i>\r\n                  </Button>\r\n                  <UncontrolledTooltip placement=\"right\" target=\"excludeInfo\">\r\n                    Exclude specific Pokémon types or unbased Pokémon.\r\n                  </UncontrolledTooltip>\r\n                </div>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label>Exclude Specific Pokémon:</Label>\r\n                <Row form className=\"align-items-end\">\r\n                  <Col md={2}>\r\n                    <FormGroup>\r\n                      <Label for=\"exclude-type\">Type</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        id=\"exclude-type\"\r\n                        value={excludePokemon.type}\r\n                        onChange={(e) =>\r\n                          setExcludePokemon({ ...excludePokemon, type: e.target.value })\r\n                        }\r\n                      >\r\n                        <option>Golden</option>\r\n                        <option>Cursed</option>\r\n                        <option>Luminous</option>\r\n                        <option>Shadow</option>\r\n                        <option>Rainbow</option>\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={3}>\r\n                    <FormGroup>\r\n                      <Label for=\"exclude-name\">Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        id=\"exclude-name\"\r\n                        value={excludePokemon.name}\r\n                        onChange={(e) =>\r\n                          setExcludePokemon({ ...excludePokemon, name: e.target.value })\r\n                        }\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col md={2}>\r\n                    <Button color=\"primary\" onClick={addPokemonToExclude}>\r\n                      Add\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n                {excludePokemonList.length > 0 && (\r\n                  <div className=\"mt-3\">\r\n                    <Label>Excluded Pokémon:</Label>\r\n                    <ListGroup>\r\n                      {excludePokemonList.map((item, index) => (\r\n                        <ListGroupItem key={index} className=\"d-flex justify-content-between\">\r\n                          {item.type} {item.name}\r\n                          <Button\r\n                            size=\"sm\"\r\n                            color=\"danger\"\r\n                            onClick={() => removeExcludedPokemon(index)}\r\n                          >\r\n                            Remove\r\n                          </Button>\r\n                        </ListGroupItem>\r\n                      ))}\r\n                    </ListGroup>\r\n                  </div>\r\n                )}\r\n              </FormGroup>\r\n            </CardBody>\r\n          </Card>\r\n          <Card className=\"mb-4\">\r\n            <CardBody>\r\n              <FormGroup check>\r\n                <Label check>\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    checked={usePercentages}\r\n                    onChange={(e) => setUsePercentages(e.target.checked)}\r\n                  />{' '}\r\n                  Use Percentage Allocation\r\n                </Label>\r\n                <Button\r\n                  id=\"percentageInfo\"\r\n                  color=\"link\"\r\n                  className=\"text-info p-0 ml-2\"\r\n                  size=\"sm\"\r\n                >\r\n                  <i className=\"fas fa-info-circle\"></i>\r\n                </Button>\r\n                <UncontrolledTooltip placement=\"right\" target=\"percentageInfo\">\r\n                  Allocate trade value based on percentages for each type.\r\n                </UncontrolledTooltip>\r\n              </FormGroup>\r\n\r\n              <Collapse isOpen={usePercentages}>\r\n                <FormGroup className=\"mt-3\">\r\n                  <Label>Type Percentages:</Label>\r\n                  {Object.keys(percentages).map((type) =>\r\n                    !excludedTypes[type] ? (\r\n                      <FormGroup key={type}>\r\n                        <Label for={`slider-${type}`}>\r\n                          {type}: {Math.round(percentages[type])}%\r\n                        </Label>\r\n                        <Input\r\n                          type=\"range\"\r\n                          id={`slider-${type}`}\r\n                          min=\"0\"\r\n                          max=\"100\"\r\n                          value={percentages[type]}\r\n                          onChange={(e) => handlePercentageChange(type, e.target.value)}\r\n                        />\r\n                      </FormGroup>\r\n                    ) : null\r\n                  )}\r\n                </FormGroup>\r\n              </Collapse>\r\n            </CardBody>\r\n          </Card>\r\n        </Form>\r\n\r\n        {message && (\r\n          <Alert color=\"info\" className=\"mt-4\">\r\n            {message}\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Display Trading For Details */}\r\n        {tradingForDetails.length > 0 && (\r\n          <Card className=\"mt-4\">\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Trading For</CardTitle>\r\n              <ListGroup flush>\r\n                {tradingForDetails.map((item, index) => (\r\n                  <ListGroupItem key={index}>\r\n                    {item.type} {item.name} -{' '}\r\n                    {formatNumber(\r\n                      parseFloat(item.cost) *\r\n                        (item.currency === 'M'\r\n                          ? 1_000_000\r\n                          : item.currency === 'K'\r\n                          ? 1_000\r\n                          : 1)\r\n                    )}\r\n                  </ListGroupItem>\r\n                ))}\r\n              </ListGroup>\r\n            </CardBody>\r\n          </Card>\r\n        )}\r\n        {tradeSuggestions.length > 0 && (\r\n          <>\r\n            <Card className=\"mt-4\">\r\n              <CardBody>\r\n                <CardTitle tag=\"h5\">Trade Suggestions</CardTitle>\r\n                <ListGroup flush>\r\n                  {tradeSuggestions.map((poke, index) => (\r\n                    <ListGroupItem key={index}>{poke.display}</ListGroupItem>\r\n                  ))}\r\n                </ListGroup>\r\n              </CardBody>\r\n            </Card>\r\n            <PokeChart />\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default QuickTrade;\r\n"],"names":["PokeChart","categorizedTotals","useRecoilValue","categorizedTotalsState","series","Object","values","map","value","parseFloat","totalValue","reduce","a","b","chartKey","entries","_ref","key","join","options","chart","background","toolbar","show","animations","enabled","easing","speed","animateGradually","delay","labels","keys","colors","legend","position","fontSize","markers","width","height","radius","itemMargin","horizontal","vertical","dataLabels","formatter","val","toLocaleString","dropShadow","style","fontWeight","tooltip","theme","y","stroke","plotOptions","pie","expandOnClick","donut","size","name","color","total","label","responsive","breakpoint","_jsx","Card","className","children","_jsxs","CardBody","CardTitle","tag","CardSubtitle","Chart","type","pokemonDetailsState","atom","default","uname","uid","totalRating","consideredPokemon","ignoredPokemon","Luminous","Cursed","Gold","Rainbow","Shadow","QuickTrade","tradingForList","setTradingForList","useState","id","cost","currency","totalTradingForValue","setTotalTradingForValue","username","setUsername","excludedTypes","setExcludedTypes","Golden","unbased","usePercentages","setUsePercentages","percentages","setPercentages","excludePokemonList","setExcludePokemonList","excludePokemon","setExcludePokemon","message","setMessage","loading","setLoading","tradeSuggestions","setTradeSuggestions","tradingForDetails","setTradingForDetails","ratesCacheRef","useRef","setCategorizedTotals","useSetRecoilState","handleTradingForChange","field","prevList","item","fetchCostIfEmpty","async","find","i","trim","combinedName","response","fetch","encodeURIComponent","toLowerCase","rate","json","rating","formattedCost","includes","replace","toString","error","console","useEffect","forEach","isNaN","formatNumber","num","toFixed","fetchRates","ratesCache","current","ratePromises","pokeNames","pokeName","then","rateData","formattedRate","catch","Promise","all","acc","Form","Row","form","Col","md","FormGroup","Label","for","Input","placeholder","onChange","e","target","required","Button","onClick","fetchPromises","fetchCostsForAll","data","success","result","excludedTypeList","filter","excludedPokemonMap","coloreds","availablePokemon","pokemon","poke","loan","lowerPokeName","pokeType","startsWith","nameWithoutType","excludeKey","level","push","gender","length","foundRates","Array","from","Set","p","selectedPokemon","pokemonByType","includedTypes","desiredValuesByType","percentage","remainingValue","desiredValue","accumulatedValue","sort","remainingPokemon","allAvailablePokemon","slice","groupedPokemon","pokemonList","grouped","typeTotals","count","undefined","details","totalRate","display","groupPokemon","disabled","_Fragment","Spinner","index","onBlur","removeTradingForItem","addTradingForItem","check","inline","checked","handleExcludeTypeChange","prev","prevPercentages","newPercentages","excludedPercentage","remainingTypes","totalRemaining","sum","t","totalIncluded","UncontrolledTooltip","placement","addPokemonToExclude","ListGroup","ListGroupItem","_","removeExcludedPokemon","Collapse","isOpen","Math","round","min","max","handlePercentageChange","Number","adjustedPercentages","oldValue","diff","otherTypes","totalOtherPercentages","proportion","totalPercentage","adjustment","Alert","flush"],"sourceRoot":""}